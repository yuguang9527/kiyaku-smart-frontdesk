// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  reservations Reservation[]
  chatHistory  ChatHistory[]

  @@map("users")
}

model Hotel {
  id          String   @id @default(uuid())
  name        String
  address     String
  phone       String?
  email       String?
  description String?  @db.Text
  amenities   Json?
  images      Json?
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  reservations Reservation[]
  qaItems      QAItem[]

  @@map("hotels")
}

model Reservation {
  id           String            @id @default(uuid())
  hotelId      String
  userId       String?
  guestName    String
  guestEmail   String?
  guestPhone   String?
  checkIn      DateTime
  checkOut     DateTime
  roomType     String
  guests       Int               @default(1)
  totalAmount  Decimal?          @db.Decimal(10, 2)
  status       ReservationStatus @default(CONFIRMED)
  notes        String?           @db.Text
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Relations
  hotel Hotel @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  user  User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("reservations")
}

model QAItem {
  id          String   @id @default(uuid())
  hotelId     String
  question    String
  answer      String   @db.Text
  category    String?
  language    String   @default("en")
  isActive    Boolean  @default(true)
  priority    Int      @default(0)
  tags        Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  hotel Hotel @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@map("qa_items")
}

model ChatHistory {
  id        String    @id @default(uuid())
  userId    String?
  sessionId String
  message   String    @db.Text
  response  String?   @db.Text
  type      ChatType  @default(TEXT)
  metadata  Json?
  createdAt DateTime  @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("chat_history")
}

model TwilioCall {
  id          String     @id @default(uuid())
  callSid     String     @unique
  from        String
  to          String
  status      CallStatus @default(INITIATED)
  duration    Int?
  recording   String?
  transcript  String?    @db.Text
  summary     String?    @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("twilio_calls")
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
}

enum ChatType {
  TEXT
  VOICE
  PHONE
}

enum CallStatus {
  INITIATED
  RINGING
  IN_PROGRESS
  COMPLETED
  FAILED
  BUSY
  NO_ANSWER
}